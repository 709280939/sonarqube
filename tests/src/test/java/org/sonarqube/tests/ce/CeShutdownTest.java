/*
 * SonarQube
 * Copyright (C) 2009-2017 SonarSource SA
 * mailto:info AT sonarsource DOT com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonarqube.tests.ce;

import com.google.common.base.Preconditions;
import com.sonar.orchestrator.Orchestrator;
import com.sonar.orchestrator.build.SonarScanner;
import java.io.File;
import java.io.IOException;
import org.apache.commons.io.FileUtils;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.DisableOnDebug;
import org.junit.rules.TemporaryFolder;
import org.junit.rules.TestRule;
import org.junit.rules.Timeout;
import org.sonarqube.ws.client.WsClient;
import org.sonarqube.ws.client.ce.ActivityStatusWsRequest;
import util.ItUtils;

import static org.assertj.core.api.Assertions.assertThat;

public class CeShutdownTest {

  @Rule
  public TestRule safeguard = new DisableOnDebug(Timeout.seconds(600));
  @Rule
  public TemporaryFolder temp = new TemporaryFolder();

  @Test
  public void stopping_CE_waits_for_in_progress_task_to_be_finished() throws Exception {
    try (ComputeEngine ce = new ComputeEngine()) {
      ce.triggerTask();
      ce.waitForTaskPaused();
      assertThat(ce.countInProgressTasks()).isEqualTo(1);

      ce.triggerStop();

      // stop does not kill in-progress workers. It waits
      // for them (at least a few dozens of seconds)
      ce.waitForStopPaused();
      assertThat(ce.countInProgressTasks()).isEqualTo(1);

      // resume the in-progress task, so that it can
      // finish successfully
      ce.resumeTask();
      ce.waitForStopped();
      assertThat(ce.isTaskFinished()).isTrue();
      assertThat(ce.hasErrorLogs()).isFalse();
    }
  }

  private class ComputeEngine implements AutoCloseable {
    private final Orchestrator orchestrator;
    private final File pauseFile;
    private final WsClient adminWsClient;
    private Thread stopper;

    ComputeEngine() throws Exception {
      pauseFile = temp.newFile();
      FileUtils.touch(pauseFile);

      orchestrator = Orchestrator.builderEnv()
        .setServerProperty("sonar.ce.pauseTask.path", pauseFile.getAbsolutePath())
        .addPlugin(ItUtils.xooPlugin())
        .addPlugin(ItUtils.pluginArtifact("server-plugin"))
        .build();
      orchestrator.start();
      adminWsClient = ItUtils.newAdminWsClient(orchestrator);
    }

    void triggerTask() {
      orchestrator.executeBuild(SonarScanner.create(new File("projects/shared/xoo-sample"), "sonar.projectKey", "foo"), false);
    }

    void waitForTaskPaused() throws Exception {
      boolean paused = false;
      while (!paused) {
        String ceLogs = FileUtils.readFileToString(orchestrator.getServer().getCeLogs());
        // this log is generated by the server-plugin of tests
        paused = ceLogs.contains("CE analysis is paused");
        if (!paused) {
          Thread.sleep(500L);
        }
      }
    }

    void waitForStopPaused() throws Exception {
      boolean paused = false;
      while (!paused) {
        String ceLogs = FileUtils.readFileToString(orchestrator.getServer().getCeLogs());
        // this log is generated by the server-plugin of tests
        paused = ceLogs.contains("Waiting for worker to finish in-progress tasks");
        if (!paused) {
          Thread.sleep(500L);
        }
      }
    }

    void waitForStopped() throws Exception {
      boolean stopped = false;
      while (!stopped) {
        String ceLogs = FileUtils.readFileToString(orchestrator.getServer().getAppLogs());
        stopped = ceLogs.contains("Process [ce] is stopped");
        if (!stopped) {
          Thread.sleep(500L);
        }
      }
    }

    void resumeTask() throws Exception {
      FileUtils.forceDelete(pauseFile);
    }

    int countInProgressTasks() {
      return adminWsClient.ce().activityStatus(ActivityStatusWsRequest.newBuilder().build()).getInProgress();
    }

    boolean isTaskFinished() throws Exception {
      String ceLogs = FileUtils.readFileToString(orchestrator.getServer().getCeLogs());
      return ceLogs.contains("Executed task | project=foo | type=REPORT");
    }

    boolean hasErrorLogs() throws IOException {
      String ceLogs = FileUtils.readFileToString(orchestrator.getServer().getCeLogs());
      return ceLogs.contains(" ERROR ");
    }

    /**
     * non-blocking stop
     */
    void triggerStop() {
      Preconditions.checkState(stopper == null);
      stopper = new Thread(orchestrator::stop);
      stopper.start();
    }

    /**
     * Safeguard
     */
    @Override
    public void close() throws Exception {
      if (stopper != null) {
        stopper.interrupt();
      }
      if (orchestrator != null) {
        // TODO improve Orchestrator so that it does not log errors
        // when server is already stopped
        orchestrator.stop();
      }
    }
  }
}
